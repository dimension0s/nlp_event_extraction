# focal loss损失计算：通过减少简单样本的损失并放大困难样本的损失,来起到均衡样本的效果

import torch
import torch.nn.functional as F
import torch.nn as nn

class FocalLoss(nn.Module):
    def __init__(self,gamma=2.0,alpha=None,reduction='mean'):
        super().__init__()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = reduction
        
    def forward(self,inputs,targets):
        BCE_loss = F.cross_entropy(inputs,targets,reduce='none')
        
        # 计算预测的概率
        pt = torch.exp(-BCE_loss)
        
        # 计算focal loss
        f_loss = self.alpha*(1-pt)**self.gamma*BCE_loss
        
        if self.reduction == 'mean':
            return f_loss.mean()
        elif self.reduction == 'sum':
            return f_loss.sum()
        else:
            return f_loss
